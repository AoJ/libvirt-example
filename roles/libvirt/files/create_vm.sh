#!/bin/bash
set -euo pipefail

export LANG=en_US.utf8

DATA_DISKS=$(echo data{1..12})

function usage() {
  echo "Usage: $0 -i IP_ADDRESS -m MEMORY -c CORES -d DISK_SIZE -n NAME [-h] [-e DATA_DISKS_SIZE] [-s SOURCE_IMAGE_NAME]"
  echo "Example:"
  echo "./$0 -i 192.168.122.20 -m 2048 -c 4 -d 40G -n template"
}

echo "$0 $@"

while getopts "hn:i:m:c:d:e:s:" opt; do
  case "$opt" in
  h) usage && exit 0;;
  n) name="$OPTARG";;
  i) ip="$OPTARG";;
  m) vmem="$OPTARG";;
  c) vcpu="$OPTARG";;
  d) disk="$OPTARG";;
  e) extended_disks="$OPTARG";;
  s) source_image="$OPTARG";;
  esac
done
shift $(( OPTIND - 1 ))


: ${name?"Missing -n name"}
: ${ip?"Missing -i ip"}
: ${vmem?"Missing -m mem"}
: ${vcpu?"Missing -c cores"}
: ${disk?"Missing -d disk_size"}


IMG_NAME="CentOS-7-x86_64-GenericCloud-1907"
SOURCE_NAME="${source_image:-$IMG_NAME}.qcow2"
DOMAIN=cz.tmo
NETWORK="bridge=br0,model=virtio"
DATA_DISKS_SIZE=${extended_disks:-}


# kvm storage pool
POOL_NAME=lab
POOL_PATH=${POOL_PATH:-/var/vm/aoj}


# check if storage pool exists, otherwise create it
if [[ -z "$(virsh pool-list | awk -v POOL="$POOL_NAME" 'NR >= 3 && $1 == POOL { print $0 }')" ]]; then
  virsh pool-define-as --name "$POOL_NAME" --type dir --target "$POOL_PATH"
  virsh pool-autostart "$POOL_NAME"
  virsh pool-build "$POOL_NAME"
  virsh pool-start "$POOL_NAME"
fi


# check if storage pool exists, otherwise create it
if [[ -n "$DATA_DISKS_SIZE" ]]; then
  for pool_name in $DATA_DISKS; do
    if [[ -z "$(virsh pool-list | awk -v POOL="$pool_name" 'NR >= 3 && $1 == POOL { print $0 }')" ]]; then
      virsh pool-define-as --name "$pool_name" --type dir --target "/${pool_name}"
      virsh pool-autostart "$pool_name"
      virsh pool-build "$pool_name"
      virsh pool-start "$pool_name"
    fi
  done
fi


# start current existing quest and exit
if [[ -n "$(virsh list | awk -v NAME="$name" 'NR >= 3 && $2 == NAME { print $0 }')" ]]; then
  virsh start "$name" || true
  exit 0
fi

if [[ -n "$(virsh list --all | awk -v NAME="$name" 'NR >= 3 && $2 == NAME { print $0 }')" ]]; then
  virsh start "$name" || true
  exit 0
fi

cat <<EOF > meta-data
instance-id: iid-${name};
network-interfaces: |
  auto eth0
  iface eth0 inet static
  address ${ip}
  network 10.254.249.0
  netmask 255.255.255.0
  broadcast 10.254.249.255
  gateway 10.254.249.253
  dns-search cz.tmo rdm.cz tmo.cz click.cz t-mobile.cz mms.t-mobile.cz
  dns-nameservers 10.254.91.127 10.254.94.57
hostname: ${name}
local-hostname: ${name}
EOF

# root|ansible passwd: pG7^XM4MS$V$zaXomSwA
# generated by
# python3 -c 'import crypt,getpass; print(crypt.crypt(getpass.getpass(), crypt.mksalt(crypt.METHOD_SHA512)))'
cat <<EOF > user-data
#cloud-config
ssh_pwauth: True
package_upgrade: false
output: {all: '| tee -a /var/log/cloud-init-output.log'}
ssh_genkeytypes: ['ed25519', 'rsa']
timezone: Europa/Prague
chpasswd:
  list: |
     root:\$6\$fz8SwRC1\$Ezzqx7mWKfbT4MxeU58If1.HWR2J.iJ5vPYUcjtD.FB6m9ReimEDJE4htKPoBq3A9QybdJH.QTTSTMqDRjJxP0
     ansible_install:\$6\$fz8SwRC1\$Ezzqx7mWKfbT4MxeU58If1.HWR2J.iJ5vPYUcjtD.FB6m9ReimEDJE4htKPoBq3A9QybdJH.QTTSTMqDRjJxP0
  expire: False
users:
  - name: ansible_install
    gecos: Ansible provisioning
    lock-passwd: false
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC49C8rZjGvqglRVnO1WB11FX7TgPxQ4fOr5mhMBu3sXDulHHfuO/38UjgisZgsQThCROXHZaLH80EXi7TGz+DE5KZP61Umc45xeMyAngkFJnwnnzv98YaLTkmWLGVSF7BIdHAM++ZrTwSnerXRn3YH9gAq6TCtsvE3j0U476Es6rRhZ9F8pmxi25HWuKUdjKCigt8k1gPFlSUhsWqc6nE+sX/6PDPEV7+PNQSQnHS728GV1o9Lnw7Eygtuwri3zlXk+2o29MJ8PiUZifqqj1qnlAQN7IUySBIQwJBRBzdnetENCaGfE9MKjJ/pxLlv+bQpdgR5DpB516dBdCXi4h6J labadmin@rztvnode464
  - name: labadmin
    gecos: Main super user labadmin
    lock-passwd: false
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC49C8rZjGvqglRVnO1WB11FX7TgPxQ4fOr5mhMBu3sXDulHHfuO/38UjgisZgsQThCROXHZaLH80EXi7TGz+DE5KZP61Umc45xeMyAngkFJnwnnzv98YaLTkmWLGVSF7BIdHAM++ZrTwSnerXRn3YH9gAq6TCtsvE3j0U476Es6rRhZ9F8pmxi25HWuKUdjKCigt8k1gPFlSUhsWqc6nE+sX/6PDPEV7+PNQSQnHS728GV1o9Lnw7Eygtuwri3zlXk+2o29MJ8PiUZifqqj1qnlAQN7IUySBIQwJBRBzdnetENCaGfE9MKjJ/pxLlv+bQpdgR5DpB516dBdCXi4h6J labadmin@rztvnode464
EOF


echo "creating image for quest"
virsh pool-refresh "$POOL_NAME" #tmp - it is required because distribute templates does not refresh pool
virsh vol-clone --pool "$POOL_NAME" "$SOURCE_NAME" "${name}.root.qcow2"
virsh vol-resize --pool "$POOL_NAME" "${name}.root.qcow2" "$disk"

ext_disks=""
if [[ -n "$DATA_DISKS_SIZE" ]]; then
  for data_disk in $DATA_DISKS; do
    if [[ ! -e "/${data_disk}/${name}.data.qcow2" ]]; then
      qemu-img create -f qcow2 /${data_disk}/${name}.data.qcow2 "$DATA_DISKS_SIZE"
      virsh pool-refresh "$data_disk"
    fi
    ext_disks="$ext_disks --disk vol=${data_disk}/${name}.data.qcow2,format=qcow2,bus=virtio "
  done
fi

# prepare cloud-init configuration for quest
if [[ -e "${POOL_PATH}/${name}.configuration.iso" ]]; then
  rm "${POOL_PATH}/${name}.configuration.iso"
fi
genisoimage -output configuration.iso -volid cidata -joliet -rock user-data meta-data
rm user-data
rm meta-data
mv configuration.iso "${POOL_PATH}/${name}.configuration.iso"
virsh pool-refresh "$POOL_NAME"


echo "Creating guest ${name}..."
virt-install                                                                    \
  --name "$name"                                                                \
  --ram "$vmem"                                                                 \
  --vcpus "$vcpu"                                                               \
  --autostart                                                                   \
  --memballoon virtio                                                           \
  --network "$NETWORK"                                                          \
  --boot hd                                                                     \
  --disk "vol=${POOL_NAME}/${name}.root.qcow2,format=qcow2,bus=virtio"          \
  --disk "vol=${POOL_NAME}/${name}.configuration.iso,bus=virtio"                \
  $ext_disks                                                                    \
  --noautoconsole                                                               \
  --graphics none                                                               \
  --console pty,target_type=serial




